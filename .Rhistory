g = graph(c(1,2,1,3,3,1,4,2,2,4,3,4, 5,6,7,8, 1,6,7,4,4,7,8,3,3,8))
g.mixed=split.Directed.Graph(g)
gdir=g.mixed[[1]]
gbidir=g.mixed[[2]]
plot(g)
source('~/Documents/Work/GitHub/DMBHGraphs/p1AndMoreWalk.R')
g = graph(c(1,2,2,3,3,4,4,1, 5,6,7,5,6,8, 4,5,3,6,2,7,1,8), d=FALSE)
#V(g)$name<-V(g)
plot(g, layout= layout.circle)
my.blocks = c(1, 1, 1, 1, 2, 2, 2, 2)
mle.b.SBM = Get.MLE(g, model="beta.SBM", tol=0.01, maxiter=10000, SBM.blocks = my.blocks)
recover()
mle.b.SBM = Get.MLE(g, model="beta.SBM", tol=0.01, maxiter=10000, SBM.blocks = my.blocks)
1
recover()
mle.b.SBM = Get.MLE(g, model="beta.SBM", tol=0.01, maxiter=10000, SBM.blocks = my.blocks)
source('~/Documents/Work/GitHub/DMBHGraphs/p1AndMoreWalk.R')
mle.b.SBM = Get.MLE(g, model="beta.SBM", tol=0.01, maxiter=10000, SBM.blocks = my.blocks)
mle.b.SBM
mle.b.SBM[[,,,1]]
mle.b.SBM[,,,1]
source('~/Documents/Work/GitHub/DMBHGraphs/p1AndMoreWalk.R')
mle.b.SBM[,,,1]
new.mle.b.SBM = mle.b.SBM
old.mle.b.SBM = Get.MLE(g, model="beta.SBM", tol=0.01, maxiter=10000, SBM.blocks = my.blocks)
old.mle.b.SBM - new.mle.b.SBM
old.mle.b.SBM - new.mle.b.SBM[,,,1]
old.mle.b.SBM - new.mle.b.SBM
old.mle.b.SBM
new.mle.b.SBM[,,3,1]
source('~/Documents/Work/GitHub/p1AndMoreWalk-updated-beta-sbm.R')
new.mle.b.SBM = Get.MLE(g, model="beta.SBM", tol=0.01, maxiter=10000, SBM.blocks = my.blocks)
old.mle.b.SBM - new.mle.b.SBM
old.mle.b.SBM - new.mle.b.SBM[,,,1]
max(old.mle.b.SBM - new.mle.b.SBM[,,,1])
g2 = graph(c(1,2,2,3,3,4,4,1, 5,6,7,5,6,8, 4,5,3,6,2,7,1,8, 9,10,11,12, 9,1, 11, 7), d=FALSE)
plot(g2, layout= layout.circle)
my.blocks2 = c(1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4)
source('~/Documents/Work/GitHub/DMBHGraphs/p1AndMoreWalk.R')
mle.b.SBM2 = Get.MLE(g2, model="beta.SBM", tol=0.01, maxiter=10000, SBM.blocks = my.blocks2)
source('~/Documents/Work/GitHub/p1AndMoreWalk-updated-beta-sbm.R')
mle.b.SBM2.new = Get.MLE(g2, model="beta.SBM", tol=0.01, maxiter=10000, SBM.blocks = my.blocks2)
mle.b.SBM2.new[,,,1]-mle.b.SBM2
max(mle.b.SBM2.new[,,,1]-mle.b.SBM2)
g1 = graph(c(1,2,2,3,1,3,4,5,6,7,4,7,5,7,3,4), d=FALSE)
#V(g)$name<-V(g)
plot(g1, layout= layout.circle)
#Compute configuration matrix
m1.beta.plus.triangles = Get.Configuration.Matrix.Beta.plus.Triangles(g1)
m1.edge.plus.triangle.counts = Get.Configuration.Matrix.Edgecounts.plus.Trianglecounts(g1)
##############################################################################
##############################################################################
library(igraph)
Get.Configuration.Matrix.Edgecounts.plus.Trianglecounts<-function(g){
n = vcount(g)
x = array(data=0, dim=c(choose(n,2),n,2))
adj = get.adjacency(g, sparse=FALSE) # would be better to find a way to represent x as a sparse array
x[1:n,,1] = adj[,]
for (i in 1:(n-2)){
for (j in (i+1):(n-1)){
for (k in (j+1):n){
triangles = adj[i,j]*adj[j,k]*adj[i,k]
index.ij = n*(i-1)-(i-1)*(i)/2+j-i
x[index.ij,k,2] = triangles
index.ik = n*(i-1)-(i-1)*(i)/2+k-i
x[index.ik,j,2] = triangles
index.jk = n*(j-1)-(j-1)*(j)/2+k-j
x[index.jk,i,2] = triangles
}
}
}
##########
startM = array(data=0.5, dim=c(choose(n,2),n,2))
startM[(n+1):choose(n,2),,1] = rep(0,choose(n,2)-n)
startM[n,n,1]=0
for (i in 1:(n-1)){
startM[i,i,1]=0
for (j in (i+1):n){
index.ij = n*(i-1)-(i-1)*(i)/2+j-i
startM[index.ij,i,2]=0
startM[index.ij,j,2]=0
}
}
return(list(x,startM))
}
Get.Configuration.Matrix.Beta.plus.Triangles<-function(g){
n = vcount(g)
x = array(data=0, dim=c(choose(n,2),choose(n,2),2))
adj = get.adjacency(g, sparse=FALSE) # would be better to find a way to represent x as a sparse array
x[1:n,1:n,1] = adj[,]
startM = array(data=0, dim=c(choose(n,2),choose(n,2),2))
startM[1:n,1:n,1] = rep(0.5,n*n)
startM[n,n,1]=0
startM[n-1,n-1,1]=0
for (i in 1:(n-2)){
startM[i,i,1] = 0
for (j in (i+1):(n-1)){
for (k in (j+1):n){
triangle.indicator = adj[i,j]*adj[j,k]*adj[i,k]
index.ij = n*(i-1)-(i-1)*(i)/2+j-i
index.ik = n*(i-1)-(i-1)*(i)/2+k-i
index.jk = n*(j-1)-(j-1)*(j)/2+k-j
index.in = n*(i-1)-(i-1)*(i)/2+n-i
index.jn = n*(j-1)-(j-1)*(j)/2+n-j
index.kn = n*(k-1)-(k-1)*(k)/2+n-k
x[index.ij,index.ik,2] = triangle.indicator
x[index.ik,index.ij,2] = triangle.indicator
x[index.ik,index.jk,2] = triangle.indicator
x[index.jk,index.ik,2] = triangle.indicator
x[index.ij,index.jk,2] = triangle.indicator
x[index.jk,index.ij,2] = triangle.indicator
startM[index.ij,index.ij,2] = 0
startM[index.ik,index.ik,2] = 0
startM[index.jk,index.jk,2] = 0
startM[index.ij,index.ik,2] = 0.5
startM[index.ik,index.ij,2] = 0.5
startM[index.ik,index.jk,2] = 0.5
startM[index.jk,index.ik,2] = 0.5
startM[index.ij,index.jk,2] = 0.5
startM[index.jk,index.ij,2] = 0.5
}
}
}
return(list(x,startM))
}
Get.MLE.Beta.plus.Triangles<-function(g, maxiter=20, tol=0.1, print.deviation=FALSE){
n = vcount(g)
matrices = Get.Configuration.Matrix.Beta.plus.Triangles(g)
# ensure structural zeros
m = matrices[[1]]
startM = matrices[[2]]
try( fm <- loglin(m, list(c(1,3),c(2,3)), fit=TRUE, start=startM,iter=maxiter, tol, print=print.deviation) )
mleMatr = fm$fit
return (mleMatr)
}
Get.MLE.Edgecounts.plus.Trianglecounts<-function(g, maxiter=20, tol=0.1, print.deviation=FALSE){
n = vcount(g)
matrices = Get.Configuration.Matrix.Edgecounts.plus.Trianglecounts(g)
# ensure structural zeros
m = matrices[[1]]
startM = matrices[[2]]
fm <- loglin(m, list(c(1,3),c(2,3)), fit=TRUE, start=startM,iter=maxiter, tol, print=print.deviation)
mleMatr = fm$fit
return (mleMatr)
}
